[["index.html", "Random R tricks Section 1 Introduction", " Random R tricks Tran Le 04-01-2022 Updated:2022-08-24 Section 1 Introduction This book-down file is where I keep the observations/tricks I got while using R. I also use this file to write some cheatsheets for later quick reference. "],["github-cheatsheet.html", "Section 2 Github-Cheatsheet 2.1 Introduction 2.2 Connecting an existing Rstudio project to Github. 2.3 Integrate Rstudio with an existing project on Github 2.4 How to post your Bookdown file to Github 2.5 Some most common git commands. 2.6 References", " Section 2 Github-Cheatsheet 2.1 Introduction This is a cheat sheet for using Github with R, including: Connecting an existing Rstudio project to Github. Integrate Rstudio with an existing project on Github. How to post your Bookdown file to Github. Side note: Some most common git commands. I have learned about Git and Github from here and from GitHub Docs. The content of this cheat sheet mainly gotten from here. 2.2 Connecting an existing Rstudio project to Github. When you have an R project on your computer and want to post it on your GitHub page one day, this part can help you do that. Step 1: Creating our local git repository In Rstudio , go to Tools \\(\\rightarrow\\) Version Control \\(\\rightarrow\\) Project Setup \\(\\rightarrow\\) This will bring you to Project Options panel. In this panel, in Version control system, choose Git , click OK. Then you can choose to use Git tab or Git commands to process steps after creating repository on GitHub. Step 2: Creating repository on GitHub. In this step, skip all of the check boxes for Add a README file, Add. gitignore, Choose a license. Click Create repository. After this step, you will have a Quick Setup screen that have some Git commands that you could use, such as: To create a new repository on the command line git init git add README.md git commit -m “first commit” git branch -M main git remote add origin git@github.com:your_GitHub_account_name/your_repository_name.git git push -u origin main To push an existing repository from the command line git remote add origin git@github.com:your_GitHub_account_name/your_repository_name.git git branch -M main git push -u origin main Step3: Connect local repository to GitHub Go to Terminal tab, paste the commandS in (2b) to connect and push your R project to your GitHub repository. 2.3 Integrate Rstudio with an existing project on Github Step 1: Clone your repository to create a Rstudio project From your GitHub repository -&gt; click on Code -&gt; copy the content clone from SSH, In Rstudio -&gt; New Project -&gt; Version Control -&gt; Git -&gt; In the repository URL, paste the link you got above (the copied SSH link). In the Project directory name, type the name of the project that you want to use (recommend to use the same name with your GitHub repository) In the Create project as a subdirectory of: browse the place you want to keep the project on your computer. Then click “Create Project”. After this step, you have a Rproject that is cloned from your Github repository. Step 2: modify your Rproject and push it back to your GitHub repository. (Optional) Modify the Rproject/Rbook-down …, build your book-down file,… (Optional) Update the gitignore file if you have some files/folders that you don’t want to push into your GitHub page. Click on Git, check the changes (check boxes) that you want to commit, input the Commit message, then click Commit. Click on Push to push your project to the Github page. 2.4 How to post your Bookdown file to Github Create a book-down project with the format gitbook. After that, init the git init in the terminal, commit all of the files, Go to output.yml to comment the bookdown:pdf_book and bookdown::epub_book: default so that we only create the gitbook file when we init. Go to the bookdown.yml file; we change where the output will be placed. Change from this: To this: delete_merged_file: true language:     ui:   chapter_name: “Chapter “ delete_merged_file: true output_dir: “docs” language:    ui:     chapter_name: “Chapter “ Go to the .gitignor file, and add \\(\\_\\)bookdown_files in the file. Git add docs/, commit, push all things on github. In GitHub, on Settings, go to Pages =&gt; GitHub Pages =&gt; change it to main, /docs . Then the link to your book is found in Your site is published at: 2.5 Some most common git commands. To use these commands on RStudio, you will need to come to Terminal and type the commands. - git config –global user.name “[name]”: sets author name. &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD - git config –global user.email “your_email@example.com”: sets author email id. ======= - git config –global user.email “[email address]”: sets author email id. &gt;&gt;&gt;&gt;&gt;&gt;&gt; a0f7d01cfa45f6a4da7bbf9814f0db459eaf7a20 - git init [repository_name]: start new repository. - git clone [url]: obtains a repository from an existing URL. - git status: lists all the files that have to be committed. - git commit -am [your_commit_message]: commits any files you’ve changed or added. - git push -u origin main: sends the committed changes of origin branch to your remote repository. 2.6 References Git and GitHub for Beginners - Crash Course - Youtube Git Commands (taken from the above tutorial) How to intall git Generating a new SSH key and adding it to the ssh-agent Youtube Integrating RStudio with a new or existing project on GitHub (CC120) "],["problems-when-using-dplyrfull_join.html", "Section 3 Problems when using dplyr::full_join 3.1 Introduction 3.2 Using dplyr::full_join 3.3 Using powerjoin::power_full_join 3.4 What if we have conflict data sets 3.5 Reference", " Section 3 Problems when using dplyr::full_join library(powerjoin) library(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── ## ✔ ggplot2 3.3.6 ✔ purrr 0.3.4 ## ✔ tibble 3.1.7 ✔ dplyr 1.0.9 ## ✔ tidyr 1.2.0 ✔ stringr 1.4.0 ## ✔ readr 2.1.2 ✔ forcats 0.5.1 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() 3.1 Introduction This part will explore some problems that we may cope with when using dplyr::full_join, and it is why powerchoice::power_full_join may come in handy. Assume that we have two people: name = John, age = 30, sex = “M”, treatment = NA (we don’t know John’s treatment) name = Marry, age = 45, sex = “F”, treatment = “A” However, we have multiple data sets that contain incomplete information about these two people. Let us consider the data that we have and the problems that we might have to cope with while trying to get data that contains as much information as possible from these two people by joining our available data sets. 3.2 Using dplyr::full_join First, let us consider the below data set. With this data set, we will get the same result while using dfs %&gt;% reduce(full_join) and dfs %&gt;% reduce(full_join, by= name). We do not see any problem here, and we collect all the information from our available data sets. dfs &lt;- list( first = tibble(name = &quot;John&quot;, age = 30), second = tibble(name = c(&quot;John&quot;, &quot;Mary&quot;), sex = c(&quot;M&quot;, &quot;F&quot;)), third = tibble(name = &quot;Mary&quot;, treatment = &quot;A&quot;) ) dfs %&gt;% reduce(full_join) ## Joining, by = &quot;name&quot; ## Joining, by = &quot;name&quot; ## # A tibble: 2 × 4 ## name age sex treatment ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 John 30 M &lt;NA&gt; ## 2 Mary NA F A dfs %&gt;% reduce(full_join, by=&quot;name&quot;) ## # A tibble: 2 × 4 ## name age sex treatment ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 John 30 M &lt;NA&gt; ## 2 Mary NA F A However, let us consider when our dfs list has one more row (the fourth row) with the name and age of Mary. dfs &lt;- list( first = tibble(name = &quot;John&quot;, age = 30), second = tibble(name = c(&quot;John&quot;, &quot;Mary&quot;), sex = c(&quot;M&quot;, &quot;F&quot;)), third = tibble(name = &quot;Mary&quot;, treatment = &quot;A&quot;), fourth = tibble(name = &quot;Mary&quot;, age = 45) ) The full_join without identifying the key by=\"name\" may think that there are two people with the same name, “Mary”. dfs %&gt;% reduce(full_join) ## Joining, by = &quot;name&quot; ## Joining, by = &quot;name&quot; ## Joining, by = c(&quot;name&quot;, &quot;age&quot;) ## # A tibble: 3 × 4 ## name age sex treatment ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 John 30 M &lt;NA&gt; ## 2 Mary NA F A ## 3 Mary 45 &lt;NA&gt; &lt;NA&gt; The full_join with identifying the key by=\"name\"creates extra columns when we have duplicated column names dfs %&gt;% reduce(full_join, by = &quot;name&quot;) ## # A tibble: 2 × 5 ## name age.x sex treatment age.y ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 John 30 M &lt;NA&gt; NA ## 2 Mary NA F A 45 We may think about how to delete these extra columns by doing like below code chunk. However, by doing this, we lost the information about Mary’s age (which was available in the age.y column above). dfs %&gt;% reduce(full_join, by = &quot;name&quot;, suffix = c(&quot;&quot;, &quot;.y&quot;)) %&gt;% select(-ends_with(&quot;.y&quot;)) ## # A tibble: 2 × 4 ## name age sex treatment ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 John 30 M &lt;NA&gt; ## 2 Mary NA F A 3.3 Using powerjoin::power_full_join Solve the problem using powerjoin. Let’s consider the dfs list with one more row. The problems we have when using dplyr::full_join and how powerjoin::power_full_join can be helpful. dfs &lt;- list( first = tibble(name = &quot;John&quot;, age = 30), second = tibble(name = c(&quot;John&quot;, &quot;Mary&quot;), sex = c(&quot;M&quot;, &quot;F&quot;)), third = tibble(name = &quot;Mary&quot;, treatment = &quot;A&quot;), fourth = tibble(name = &quot;Mary&quot;, age = 45), fifth = tibble(name = &quot;Mary&quot;, sex = &quot;F&quot;) ) dfs %&gt;% reduce(full_join) ## Joining, by = &quot;name&quot; ## Joining, by = &quot;name&quot; ## Joining, by = c(&quot;name&quot;, &quot;age&quot;) ## Joining, by = c(&quot;name&quot;, &quot;sex&quot;) ## # A tibble: 3 × 4 ## name age sex treatment ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 John 30 M &lt;NA&gt; ## 2 Mary NA F A ## 3 Mary 45 &lt;NA&gt; &lt;NA&gt; dfs %&gt;% reduce(full_join, by = &quot;name&quot;) ## # A tibble: 2 × 6 ## name age.x sex.x treatment age.y sex.y ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 John 30 M &lt;NA&gt; NA &lt;NA&gt; ## 2 Mary NA F A 45 F The powerjoin package helps us collect all available information. dfs %&gt;% power_full_join(by= &quot;name&quot;, conflict = coalesce_xy) ## # A tibble: 2 × 4 ## name treatment age sex ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 John &lt;NA&gt; 30 M ## 2 Mary A 45 F 3.4 What if we have conflict data sets Now, consider that we have two data sets for Mary that have different values for “age” (the fourth and fifth), with ages equal to 45 and 65, respectively. dfs &lt;- list( first = tibble(name = &quot;John&quot;, age = 30), second = tibble(name = c(&quot;John&quot;, &quot;Mary&quot;), sex = c(&quot;M&quot;, &quot;F&quot;)), third = tibble(name = &quot;Mary&quot;, treatment = &quot;A&quot;), fourth = tibble(name = &quot;Mary&quot;, age = 45), fifth = tibble(name = &quot;Mary&quot;, age = 65) ) Then the argument conflict = coalesce_xy will take the first available value (age = 45), while conflict = coalesce_yx will take the second available value (age = 65). dfs %&gt;% power_full_join(by= &quot;name&quot;, conflict = coalesce_xy) ## # A tibble: 2 × 4 ## name sex treatment age ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 John M &lt;NA&gt; 30 ## 2 Mary F A 45 dfs %&gt;% power_full_join(by= &quot;name&quot;, conflict = coalesce_yx) ## # A tibble: 2 × 4 ## name sex treatment age ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 John M &lt;NA&gt; 30 ## 2 Mary F A 65 3.5 Reference https://github.com/moodymudskipper/powerjoin "],["diagrammer_graphviz-and-memaid.html", "Section 4 DiagrammeR_graphviz and memaid 4.1 Keywords: 4.2 Graph Basics 4.3 Graphs with with styling properties (e.g., color, shape, …), grouping labels (e.g., type and rel) 4.4 Using Data from Tables to Generate a Graph 4.5 grViz - Keyword - Key structure 4.6 References", " Section 4 DiagrammeR_graphviz and memaid library(DiagrammeR) library(DT) 4.1 Keywords: create_graph(): create a graph object, add_node: add some nodes add_edge: add edges to a graph. delete_edge: node_aes, edge_aes: contain arguments for each of the accepted node/edge aesthetic attributes (e.g., shape, style, color, fillcolor)/ (e.g., shape, style, penwidth, color). node_data, and edge_data: help bind data specifically to the created nodes/edges. 4.2 Graph Basics Each node gets a new integer ID upon creation. Each edge also gets an ID starting from 1. Viewing the graph object in the console will provide some basic information about the graph and some pointers on where to get additional information. a_graph &lt;- create_graph() %&gt;% add_node() %&gt;% add_node() %&gt;% add_edge( from = 1, to = 2) %&gt;% add_edge(from = 1, to=1) render_graph(a_graph, title = &quot;A simple graph&quot;, layout = &quot;nicely&quot;) a_graph ## DiagrammeR Graph // 2 nodes / 2 edges ## -- directed / connected ## ## NODES / type: &lt;unused&gt; / label: &lt;unused&gt; info: `get_node_df()` ## -- no additional node attributes ## EDGES / rel: &lt;unused&gt; info: `get_edge_df()` ## -- no additional edge attributes ## SELECTION / &lt;none&gt; ## CACHE / &lt;none&gt; ## GLOBAL ATTRS / 17 are set info: `get_global_graph_attr_info()` ## GRAPH ACTIONS / &lt;none&gt; ## GRAPH LOG / &lt;2 actions&gt; -&gt; add_node() -&gt; add_edge() -&gt; add_edge() delete_edge(): deletes away an edge. b_graph &lt;- a_graph %&gt;% delete_edge(from = 1, to = 2) render_graph(b_graph) add_node(from = , to= ): We can add a node to the graph while, at the same time, defining edges to or from existing nodes in the graph. c_graph &lt;- b_graph %&gt;% add_node(from = 1, to = 2) render_graph(c_graph) When there already an edge between two nodes ((1) and (3), for example). The add_node() will create two (other) edges that connect (1) to (4), and (4) to (3). c1_graph &lt;- c_graph %&gt;% add_node(from = 1, to = 3) render_graph(c1_graph) 4.3 Graphs with with styling properties (e.g., color, shape, …), grouping labels (e.g., type and rel) Any time we add a node or edge to the graph, we can add node or edge aesthetic or data attributes. These can be styling properties (e.g., color, shape), grouping labels (e.g., type and rel), or data values that are useful for calculations and for display purposes. Most node or edge creation functions (depending on whether they create either edges, nodes, or both) have the arguments node_aes, edge_aes, node_data, and edge_data. Using these, we can call the namesake helper functions (node_aes(), edge_aes(), node_data(), and edge_data()) to specifically target the created nodes or edges and bind attribute data. An additional benefit in using the helper functions (for the node/edge aesthetic attributes especially) is that RStudio can provide inline help on attribute names and definitions when typing node_aes( or edge_aes( and pressing the TAB key. d_graph &lt;- c_graph %&gt;% add_node( type = &quot;type_a&quot;, node_aes = node_aes( color = &quot;steelblue&quot;, fillcolor = &quot;lightblue&quot;, fontcolor = &quot;gray35&quot;), node_data = node_data( value = 2.5)) %&gt;% add_edge( from = 1, to = 3, rel = &quot;interacted_with&quot;, edge_aes = edge_aes( color = &quot;red&quot;, arrowhead = &quot;vee&quot;, tooltip = &quot;Red Arrow&quot;), edge_data = edge_data( value = 5.2)) render_graph(d_graph, layout = &quot;nicely&quot;) select node/edge ==&gt; set/mutate the nodes/edges ==&gt; close the mutation select nodes: select_nodes, select_nodes_by_id(), select_last_nodes_created select edge: select_edges(), select_edges_by_edge_id(), select_last_edges_created() muttate nodes/edges: set_node_attrs_ws(), mutate_node_attrs_ws(), delete_nodes_ws(), create_subgraph_ws(). close the mutation: invert_selection, deselect_nodes()/deselect_edges(), clear_selection. Creating attributes and setting their values is often useful because we can further work with the attributes. Furthermore, we can create aesthetic properties based on numerical or categorical data. This is important for when you want to display your graph diagram using the render_graph() function. e_graph &lt;- d_graph %&gt;% select_nodes(conditions = value == 2.5) %&gt;% set_node_attrs_ws(node_attr = fillcolor, value = &quot;orange&quot;) %&gt;% clear_selection() render_graph(e_graph) f_graph &lt;- create_graph() %&gt;% add_path(n = 3) %&gt;% # add a path that connect 1, 2, 3 add_cycle(n = 4) %&gt;% # add cycle that connect 4-&gt;5-&gt;6-&gt;7-&gt;4 add_balanced_tree(k = 2, h = 2) render_graph(f_graph) 4.4 Using Data from Tables to Generate a Graph The DiagrammeR package contains a few simple datasets that help illustrate how to create a graph with table data. The node_list_1 and edge_list_1 datasets are super simple node and edge data frames that can be assembled into a graph. Let’s print them side by side to see what we’re working with. datatable(node_list_1) datatable(edge_list_1) To fashion this into a graph, we need to ensure that both the nodes and their attributes (in this case, just a label) are added, and, that the edges are added. Furthermore, we must map the from and the to definitions to the node id (in other cases, we may need to map relationships between text labels to the same text attribute stored in the node data frame). We can use three functions to generate a graph containing this data: create_graph() add_nodes_from_table() add_edges_from_table() # Create the graph object i_graph_1 &lt;- create_graph() %&gt;% add_nodes_from_table( table = node_list_1, label_col = label) %&gt;% add_edges_from_table( table = edge_list_1, from_col = from, to_col = to, from_to_map = id_external) render_graph(i_graph_1) 4.5 grViz - Keyword - Key structure DiagrammeR::grViz(&quot;(digraph|graph) graph_name{ graph[...graph_stmt...] # node[...node_stmt...] a[...] b[...] # /*Comment: here are for */ a -&gt; b # must use -&gt; for direct graph digraph a -- b # must use -- for undirected graph }&quot;) 4.5.1 A minimal grViz plot DiagrammeR::grViz(&quot;digraph { graph[layout = dot, rankdir = LR] a; b; c a -&gt; b -&gt; c c-&gt;b }&quot;) 4.5.2 DiagrammeR Implementation For Graphviz graphs, DiagrammeR uses the processing function called grViz(). What you pass into grViz() is a valid graph specification in the DOT language. The DOT graph description can either be delivered to grViz() in the form of a string, a reference .gv file or as a text connection. The Graphviz graph specification must begin with a directive stating whether a directed graph (digraph) or an indirect graph (graph) is desired. Semantically, this indicates whether or not there is a natural direction from one of the edge’s nodes to the other. An optional graph ID follows this and paired curly braces denotes the body of the statement list (stmt_list). Optionally, a graph may also be described as strict. This forbids the creation of multi-edges (i.e., there can be at most one edge with a given tail node and head node in the directed case). For indirect graphs, there can be at most one edge connected to the same two nodes. Subsequent edge statements using the same two nodes will identify the edge with the previously defined one and apply any attributes given in the edge statement. 4.5.3 Simple table 4.5.3.1 Horizontal flowchart Adding rankdir = LR in the graph statement will give us a horizontal flowchart DiagrammeR::grViz(&quot;digraph { graph [layout = dot, rankdir = LR] # define the global styles of the nodes. We can override these in box if we wish node [shape = rectangle, style = filled, fillcolor = Linen] data1 [label = &#39;Dataset 1&#39;, shape = folder, fillcolor = Beige] data2 [label = &#39;Dataset 2&#39;, shape = folder, fillcolor = Beige] process [label = &#39;Process \\n Data&#39;] statistical [label = &#39;Statistical \\n Analysis&#39;] results [label= &#39;Results&#39;] # edge definitions with the node IDs {data1 data2} -&gt; process -&gt; statistical -&gt; results }&quot;) 4.5.3.2 Vertical flowchart Not adding rankdir = LR in the graph statement will give us a vertical flowchart. grViz(&quot;digraph { graph [layout = dot] # define the global styles of the nodes. We can override these in box if we wish node [shape = rectangle, style = filled, fillcolor = Linen] data1 [label = &#39;Dataset 1&#39;, shape = folder, fillcolor = Beige] data2 [label = &#39;Dataset 2&#39;, shape = folder, fillcolor = Beige] process [label = &#39;Process \\n Data&#39;] statistical [label = &#39;Statistical \\n Analysis&#39;] results [label= &#39;Results&#39;] # edge definitions with the node IDs {data1 data2} -&gt; process -&gt; statistical -&gt; results }&quot;) 4.5.4 Parameterized figures - Graphviz Substitution A great benefit of designing figures within R is that we are able to connect the figures directly with our analysis by reading R values directly into our flowcharts. To do this we, you can use the @(X?) symbol directly within the figure, then refer to this in the footer of the plot using [X]:, where X is the a unique numeric index. # Define some sample data contains your R values data &lt;- list(a=1000, b=800, c=600, d=400) # Create the graph using values gotten from the data grViz(&quot; digraph graph2 { graph [layout = dot] # node definitions with substituted label text node [shape = rectangle, width = 4, fillcolor = Biege] o [label = &#39;@@1&#39;] a [label = &#39;@@2&#39;] b [label = &#39;@@3&#39;] c [label = &#39;@@4&#39;] d [label = &#39;@@5&#39;] o -&gt;a -&gt; b -&gt; c -&gt; d } [1]: &#39;start your diagram&#39; [2]: paste0(&#39;Raw Data (n = &#39;, data$a, &#39;)&#39;) [3]: paste0(&#39;Remove Errors (n = &#39;, data$b, &#39;)&#39;) [4]: paste0(&#39;Identify Potential Customers (n = &#39;, data$c, &#39;)&#39;) [5]: paste0(&#39;Select Top Priorities (n = &#39;, data$d, &#39;)&#39;) &quot;) 4.5.5 Subgraphs and clusters 4.5.5.1 Using label grViz(&quot; digraph a_nice_graph { # node definitions with substituted label text node [fontname = Helvetica] a [label = &#39;@@1&#39;] b [label = &#39;@@2-1&#39;] c [label = &#39;@@2-2&#39;] d [label = &#39;@@2-3&#39;] e [label = &#39;@@2-4&#39;] f [label = &#39;@@2-5&#39;] g [label = &#39;@@2-6&#39;] h [label = &#39;@@2-7&#39;] i [label = &#39;@@2-8&#39;] j [label = &#39;@@2-9&#39;] # edge definitions with the node IDs a -&gt; {b c d e f g h i j} } [1]: &#39;top&#39; [2]: 10:20 &quot;) 4.5.5.2 Not using label grViz(&quot; digraph a_nice_graph { # node definitions with substituted label text node [fontname = Helvetica] # edge definitions with the node IDs &#39;@@1&#39; -&gt; {&#39;@@2-1&#39; &#39;@@2-2&#39; &#39;@@2-3&#39; &#39;@@2-4&#39; &#39;@@2-5&#39; &#39;@@2-6&#39; &#39;@@2-7&#39;&#39;@@2-8&#39;&#39;@@2-9&#39;} } [1]: &#39;top&#39; [2]: 10:20 &quot;) 4.5.6 Node data frames (NDFs) and Edge data frames (EDFs) create_nodes() function creates NDF with nodes and their attributes, including: single values are repeated for n number of nodes supplied selective setting of attributes (e.g., giving attr values for 3 of 10 nodes, allowing non-set nodes to use defaults or globally set attr values) supplying overlong vectors for attributes will result in trimming down to the number of nodes setting label = FALSE will conveniently result in a non-labeled node The function only has one argument that requires values to be supplied: the nodes argument. Just supplying a set of unique ID values for nodes will create an NDF with nodes that have no additional attributes. # Create a node data frame nodes_1 &lt;- create_node_df( n=4, nodes = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;), label = FALSE, type = &quot;lower&quot;, style = &quot;filled&quot;, color = &quot;aqua&quot;, shape = c(&quot;circle&quot;, &quot;circle&quot;, &quot;rectangle&quot;, &quot;rectangle&quot;), data = c(3.5, 2.6, 9.4, 2.7)) nodes_1 ## id type label nodes style color shape data ## 1 1 lower &lt;NA&gt; a filled aqua circle 3.5 ## 2 2 lower &lt;NA&gt; b filled aqua circle 2.6 ## 3 3 lower &lt;NA&gt; c filled aqua rectangle 9.4 ## 4 4 lower &lt;NA&gt; d filled aqua rectangle 2.7 # Create another node data frame nodes_2 &lt;- create_node_df( n=4, nodes = 1:4, label = TRUE, type = &quot;upper&quot;, style = &quot;filled&quot;, color = &quot;red&quot;, shape = &quot;triangle&quot;, data = c(0.5, 3.9, 3.7, 8.2)) # Inspect the `nodes_2` NDF nodes_2 ## id type label nodes style color shape data ## 1 1 upper 1 1 filled red triangle 0.5 ## 2 2 upper 2 2 filled red triangle 3.9 ## 3 3 upper 3 3 filled red triangle 3.7 ## 4 4 upper 4 4 filled red triangle 8.2 #&gt; nodes type label style color shape data #&gt; 1 1 upper 1 filled red triangle 0.5 #&gt; 2 2 upper 2 filled red triangle 3.9 #&gt; 3 3 upper 3 filled red triangle 3.7 #&gt; 4 4 upper 4 filled red triangle 8.1 # Create a simple NDF nodes &lt;- create_node_df( n=4, nodes = 1:4, shape = c(&quot;circle&quot;, &quot;circle&quot;, &quot;rectangle&quot;, &quot;rectangle&quot;), type = &quot;number&quot;) # Create a simple EDF edges &lt;- create_edge_df( n=4, from = c(1, 1, 3, 1), to = c(2, 3, 4, 4), rel = &quot;leading_to&quot; ) g &lt;- create_graph(nodes_df=nodes, edges_df=edges) render_graph(g) grViz(&quot; digraph boxes_and_circles { # a &#39;graph&#39; statement graph [overlap = true, fontsize = 10] # several &#39;node&#39; statements node [shape = box, fontname = Helvetica] A; B; C; D; E; F node [shape = circle, fixedsize = true, width = 0.9] // sets as circles 1; 2; 3; 4; 5; 6; 7; 8 # several &#39;edge&#39; statements A-&gt;1 B-&gt;2 B-&gt;3 B-&gt;4 C-&gt;A 1-&gt;D E-&gt;A 2-&gt;4 1-&gt;5 1-&gt;F E-&gt;6 4-&gt;6 5-&gt;7 6-&gt;7 3-&gt;8 } &quot;) # Create a simple NDF # nodes &lt;- # create_nodes( # nodes = 1:4, # type = &quot;number&quot;) # # # Create a simple EDF # edges &lt;- # create_edges( # from = c(1, 1, 3, 1), # to = c(2, 3, 4, 4), # rel = &quot;related&quot;) # # # Create the graph object, incorporating the NDF and the EDF, and, # # providing some global attributes # graph &lt;- # create_graph( # nodes_df = nodes, # edges_df = edges, # graph_attrs = &quot;layout = neato&quot;, # node_attrs = &quot;fontname = Helvetica&quot;, # edge_attrs = &quot;color = gray20&quot;) # # # View the graph # render_graph(graph) 4.6 References DiagrammeR main page https://mikeyharper.uk/flowcharts-in-r-using-diagrammer/ http://rich-iannone.github.io/DiagrammeR/graph_creation.html "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
