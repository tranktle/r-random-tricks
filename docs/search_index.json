[["index.html", "Random R tricks Section 1 Introduction", " Random R tricks Tran Le 04-01-2022 Updated:2022-07-27 Section 1 Introduction This book-down file is where I keep the observations/tricks I got while using R. I also use this file to write some cheatsheets for later quick reference. "],["github-cheatsheet.html", "Section 2 Github-Cheatsheet 2.1 Introduction 2.2 Connecting an existing Rstudio project to Github. 2.3 Integrate Rstudio with an existing project on Github 2.4 How to post your Bookdown file to Github 2.5 2.6 References", " Section 2 Github-Cheatsheet 2.1 Introduction This is a cheat sheet for using Github with R, including: Connecting an existing Rstudio project to Github. Integrate Rstudio with an existing project on Github. How to post your Bookdown file to Github. Side note: Some most common git commands. I have learned about Git and Github from here and from GitHub Docs. The content of this cheat sheet mainly gotten from here. 2.2 Connecting an existing Rstudio project to Github. When you have an R project on your computer and want to post it on your GitHub page one day, this part can help you do that. Step 1: Creating our local git repository In Rstudio , go to Tools \\(\\rightarrow\\) Version Control \\(\\rightarrow\\) Project Setup \\(\\rightarrow\\) This will bring you to Project Options panel. In this panel, in Version control system, choose Git , click OK. Then you can choose to use Git tab or Git commands to process steps after creating repository on GitHub. Step 2: Creating repository on GitHub. In this step, skip all of the check boxes for Add a README file, Add. gitignore, Choose a license. Click Create repository. After this step, you will have a Quick Setup screen that have some Git commands that you could use, such as: To create a new repository on the command line git init git add README.md git commit -m “first commit” git branch -M main git remote add origin git@github.com:your_GitHub_account_name/your_repository_name.git git push -u origin main To push an existing repository from the command line git remote add origin git@github.com:your_GitHub_account_name/your_repository_name.git git branch -M main git push -u origin main Step3: Connect local repository to GitHub Go to Terminal tab, paste the commandS in (2b) to connect and push your R project to your GitHub repository. 2.3 Integrate Rstudio with an existing project on Github Step 1: Clone your repository to create a Rstudio project From your GitHub repository -&gt; click on Code -&gt; copy the content clone from SSH, In Rstudio -&gt; New Project -&gt; Version Control -&gt; Git -&gt; In the repository URL, paste the link you got above (the copied SSH link). In the Project directory name, type the name of the project that you want to use (recommend to use the same name with your GitHub repository) In the Create project as a subdirectory of: browse the place you want to keep the project on your computer. Then click “Create Project”. After this step, you have a Rproject that is cloned from your Github repository. Step 2: modify your Rproject and push it back to your GitHub repository. (Optional) Modify the Rproject/Rbook-down …, build your book-down file,… (Optional) Update the gitignore file if you have some files/folders that you don’t want to push into your GitHub page. Click on Git, check the changes (check boxes) that you want to commit, input the Commit message, then click Commit. Click on Push to push your project to the Github page. 2.4 How to post your Bookdown file to Github Create a book-down project with the format gitbook. After that, init the git init in the terminal, commit all of the files, Go to output.yml to comment the bookdown:pdf_book and bookdown::epub_book: default so that we only create the gitbook file when we init. Go to the bookdown.yml file; we change where the output will be placed. Change from this: To this: delete_merged_file: true language:     ui:   chapter_name: “Chapter “ delete_merged_file: true output_dir: “docs” language:    ui:     chapter_name: “Chapter “ Go to the .gitignor file, and add \\(\\_\\)bookdown_files in the file. Git add docs/, commit, push all things on github. In GitHub, on Settings, go to Pages =&gt; GitHub Pages =&gt; change it to main, /docs . Then the link to your book is found in Your site is published at: 2.5 To use these commands on RStudio, you will need to come to Terminal and type the commands. - git config –global user.name “[name]”: sets author name - git config –global user.email “[email address]”: sets author email id - git init [repository_name]: start new repository - git clone [url]: obtains a repository from an existing URL. - git status: lists all the files that have to be committed. - git commit -am [your_commit_message]: commits any files you’ve changed or added - git push -u origin main: sends the committed changes of origin branch to your remote repository. 2.6 References Git and GitHub for Beginners - Crash Course - Youtube Git Commands (taken from the above tutorial) How to intall git Generating a new SSH key and adding it to the ssh-agent Youtube Integrating RStudio with a new or existing project on GitHub (CC120) "],["problems-when-using-dplyrfull_join.html", "Section 3 Problems when using dplyr::full_join 3.1 Introduction 3.2 Using dplyr::full_join 3.3 Using powerjoin::power_full_join 3.4 What if we have conflict data sets 3.5 Reference", " Section 3 Problems when using dplyr::full_join library(powerjoin) library(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── ## ✔ ggplot2 3.3.6 ✔ purrr 0.3.4 ## ✔ tibble 3.1.7 ✔ dplyr 1.0.9 ## ✔ tidyr 1.2.0 ✔ stringr 1.4.0 ## ✔ readr 2.1.2 ✔ forcats 0.5.1 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() 3.1 Introduction This part will explore some problems that we may cope with when using dplyr::full_join, and it is why powerchoice::power_full_join may come in handy. Assume that we have two people: name = John, age = 30, sex = “M”, treatment = NA (we don’t know John’s treatment) name = Marry, age = 45, sex = “F”, treatment = “A” However, we have multiple data sets that contain incomplete information about these two people. Let us consider the data that we have and the problems that we might have to cope with while trying to get data that contains as much information as possible from these two people by joining our available data sets. 3.2 Using dplyr::full_join First, let us consider the below data set. With this data set, we will get the same result while using dfs %&gt;% reduce(full_join) and dfs %&gt;% reduce(full_join, by= name). We do not see any problem here, and we collect all the information from our available data sets. dfs &lt;- list( first = tibble(name = &quot;John&quot;, age = 30), second = tibble(name = c(&quot;John&quot;, &quot;Mary&quot;), sex = c(&quot;M&quot;, &quot;F&quot;)), third = tibble(name = &quot;Mary&quot;, treatment = &quot;A&quot;) ) dfs %&gt;% reduce(full_join) ## Joining, by = &quot;name&quot; ## Joining, by = &quot;name&quot; ## # A tibble: 2 × 4 ## name age sex treatment ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 John 30 M &lt;NA&gt; ## 2 Mary NA F A dfs %&gt;% reduce(full_join, by=&quot;name&quot;) ## # A tibble: 2 × 4 ## name age sex treatment ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 John 30 M &lt;NA&gt; ## 2 Mary NA F A However, let us consider when our dfs list has one more row (the fourth row) with the name and age of Mary. dfs &lt;- list( first = tibble(name = &quot;John&quot;, age = 30), second = tibble(name = c(&quot;John&quot;, &quot;Mary&quot;), sex = c(&quot;M&quot;, &quot;F&quot;)), third = tibble(name = &quot;Mary&quot;, treatment = &quot;A&quot;), fourth = tibble(name = &quot;Mary&quot;, age = 45) ) The full_join without identifying the key by=\"name\" may think that there are two people with the same name, “Mary”. dfs %&gt;% reduce(full_join) ## Joining, by = &quot;name&quot; ## Joining, by = &quot;name&quot; ## Joining, by = c(&quot;name&quot;, &quot;age&quot;) ## # A tibble: 3 × 4 ## name age sex treatment ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 John 30 M &lt;NA&gt; ## 2 Mary NA F A ## 3 Mary 45 &lt;NA&gt; &lt;NA&gt; The full_join with identifying the key by=\"name\"creates extra columns when we have duplicated column names dfs %&gt;% reduce(full_join, by = &quot;name&quot;) ## # A tibble: 2 × 5 ## name age.x sex treatment age.y ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 John 30 M &lt;NA&gt; NA ## 2 Mary NA F A 45 We may think about how to delete these extra columns by doing like below code chunk. However, by doing this, we lost the information about Mary’s age (which was available in the age.y column above). dfs %&gt;% reduce(full_join, by = &quot;name&quot;, suffix = c(&quot;&quot;, &quot;.y&quot;)) %&gt;% select(-ends_with(&quot;.y&quot;)) ## # A tibble: 2 × 4 ## name age sex treatment ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 John 30 M &lt;NA&gt; ## 2 Mary NA F A 3.3 Using powerjoin::power_full_join Solve the problem using powerjoin. Let’s consider the dfs list with one more row. The problems we have when using dplyr::full_join and how powerjoin::power_full_join can be helpful. dfs &lt;- list( first = tibble(name = &quot;John&quot;, age = 30), second = tibble(name = c(&quot;John&quot;, &quot;Mary&quot;), sex = c(&quot;M&quot;, &quot;F&quot;)), third = tibble(name = &quot;Mary&quot;, treatment = &quot;A&quot;), fourth = tibble(name = &quot;Mary&quot;, age = 45), fifth = tibble(name = &quot;Mary&quot;, sex = &quot;F&quot;) ) dfs %&gt;% reduce(full_join) ## Joining, by = &quot;name&quot; ## Joining, by = &quot;name&quot; ## Joining, by = c(&quot;name&quot;, &quot;age&quot;) ## Joining, by = c(&quot;name&quot;, &quot;sex&quot;) ## # A tibble: 3 × 4 ## name age sex treatment ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 John 30 M &lt;NA&gt; ## 2 Mary NA F A ## 3 Mary 45 &lt;NA&gt; &lt;NA&gt; dfs %&gt;% reduce(full_join, by = &quot;name&quot;) ## # A tibble: 2 × 6 ## name age.x sex.x treatment age.y sex.y ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 John 30 M &lt;NA&gt; NA &lt;NA&gt; ## 2 Mary NA F A 45 F The powerjoin package helps us collect all available information. dfs %&gt;% power_full_join(by= &quot;name&quot;, conflict = coalesce_xy) ## # A tibble: 2 × 4 ## name treatment age sex ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 John &lt;NA&gt; 30 M ## 2 Mary A 45 F 3.4 What if we have conflict data sets Now, consider that we have two data sets for Mary that have different values for “age” (the fourth and fifth), with ages equal to 45 and 65, respectively. dfs &lt;- list( first = tibble(name = &quot;John&quot;, age = 30), second = tibble(name = c(&quot;John&quot;, &quot;Mary&quot;), sex = c(&quot;M&quot;, &quot;F&quot;)), third = tibble(name = &quot;Mary&quot;, treatment = &quot;A&quot;), fourth = tibble(name = &quot;Mary&quot;, age = 45), fifth = tibble(name = &quot;Mary&quot;, age = 65) ) Then the argument conflict = coalesce_xy will take the first available value (age = 45), while conflict = coalesce_yx will take the second available value (age = 65). dfs %&gt;% power_full_join(by= &quot;name&quot;, conflict = coalesce_xy) ## # A tibble: 2 × 4 ## name sex treatment age ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 John M &lt;NA&gt; 30 ## 2 Mary F A 45 dfs %&gt;% power_full_join(by= &quot;name&quot;, conflict = coalesce_yx) ## # A tibble: 2 × 4 ## name sex treatment age ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 John M &lt;NA&gt; 30 ## 2 Mary F A 65 3.5 Reference https://github.com/moodymudskipper/powerjoin "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
